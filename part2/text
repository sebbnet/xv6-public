#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[])
{
	char *string = malloc(10);
	strcpy(string, "hello\0");
	printf("%s\n", string);
	//free(string);
}


1) When memory allocated by the user with malloc is not freed, it will result in a memory leak occuring which would lead the OS to run out of memory and crash. The amount of available memory is reduced whenever such an event occurs, however if a program has a short lifespan it is not a huge issue in the current day as a modern OS will release the memory of an application on termination. gdb isn't very useful in this scenario, as it is not intended for low level memory analysis but more as a general use debugging tool, in particular it can be useful in locating segfaults. Valgrind is more useful for finding memory leaks as it will attempt to show you very granularly where they may occur in heapspace. Below is an example of having run valgrind on the program where /string/ was not freed. A program that did not experience memory leaks would have yielded a message from valgrind saying that all the heap blocks were freed.


==17545== Memcheck, a memory error detector
==17545== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==17545== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==17545== Command: ./a.out
==17545== 
hello
==17545== 
==17545== HEAP SUMMARY:
==17545==     in use at exit: 10 bytes in 1 blocks
==17545==   total heap usage: 1 allocs, 0 frees, 10 bytes allocated
==17545== 
==17545== 10 bytes in 1 blocks are definitely lost in loss record 1 of 1
==17545==    at 0x4C2AB80: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==17545==    by 0x400595: main (in /home/seb/Desktop/git/xv6/part2/a.out)
==17545== 
==17545== LEAK SUMMARY:
==17545==    definitely lost: 10 bytes in 1 blocks
==17545==    indirectly lost: 0 bytes in 0 blocks
==17545==      possibly lost: 0 bytes in 0 blocks
==17545==    still reachable: 0 bytes in 0 blocks
==17545==         suppressed: 0 bytes in 0 blocks
==17545== 
==17545== For counts of detected and suppressed errors, rerun with: -v
==17545== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)


2) 


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[])
{
	int * data = malloc(100 * sizeof *data);
	free(data);
	printf("%d", data[93]); 
}


This program does run without fault and prints out 0 as a value. Valgrind reports that there are no memory leaks but an invalid read of size 4 (bytes) at the place in memory where data[93] would reside. Accessing a pointer in a region of memory that was already freed doesn't cause the program to crash but it is not good practice to write code like this.

==18499== Memcheck, a memory error detector
==18499== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==18499== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==18499== Command: ./a.out
==18499== 
==18499== Invalid read of size 4
==18499==    at 0x4005F0: main (in /home/seb/Desktop/git/xv6/part2/a.out)
==18499==  Address 0x51fc1b4 is 372 bytes inside a block of size 400 free'd
==18499==    at 0x4C2BDEC: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==18499==    by 0x4005E5: main (in /home/seb/Desktop/git/xv6/part2/a.out)
==18499== 
0==18499== 
==18499== HEAP SUMMARY:
==18499==     in use at exit: 0 bytes in 0 blocks
==18499==   total heap usage: 1 allocs, 1 frees, 400 bytes allocated
==18499== 
==18499== All heap blocks were freed -- no leaks are possible
==18499== 
==18499== For counts of detected and suppressed errors, rerun with: -v
==18499== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
